Design Document

Tian Zhao N15974307, Qianran Sun N13240100

Git UIL: https://github.com/qianransun/ADB-project

Tian Zhao is in charge of functions in package TM mostly, and Qianran Sun is in charge of functions in package DM mostly. We work together for the logic and structure building.

We have two packages TM(transaction manager) and DM(data manager).

TM:
The main function is included in TM, in Engine.java. It calls initial(), run() and printout().

initial():
Read in the input file and parse instructions.

run():
Runs the algorithm.

For each R or W instruction, TM tries to allocate the variable to the transaction by calling the getReadLock() or getWriteLock() in DM.

If the transaction can get the lock, the lock is added to the variable in DM and also maintained in transaction itself in TM.

Otherwise, the instruction is put into the variable’s waitlist in DM and stored in waiting in transaction itself in TM. Furthermore, every time the R or W instruction is rejected, TM is going to do a cycle detection by calling cycleDetect(), which test if there exists a cycle and calls abortTransaction() to abort the youngest transaction if there is deadlock.

For dump instruction, call the respective dump function in DM.

For fail instruction, DM is going to set sites to fail. TM is going to call abortTransaction() to abort transactions due to the failure of the site.

For recover instruction, set sites to recover in DM.

For end instruction, check if the transaction can commit.

If the transaction can commit, write its changes to database. Release all its locks and set its status to committed.

Otherwise, call abortTransaction().

abortTranstion(int transactionIndex):
1.	 Upon aborting, TM removes its waiting instruction from wait list in DM.
2.	After that, release variable locks held by the transaction and process the wait list of the released variable in DM.
3.	Finally, set the transaction to aborted while clearing its change list and waiting list.

printout():
print out the result of R, dump, end instructions.


DM:
Main functions are implemented in SiteEngine.java file. Its constructor initializes sites and waitlist. In our implementation, all variable copies share one waitlist.

getWriteLock(Instruction instruction):
Try to get write locks from the variable on all up sites. If there is no site up, return false to TM to indicate that the operation is rejected and put instruction into wait list. If there is any up site that cannot process the instruction, the instruction is rejected.

There are 2 cases for write instruction:
1.	No lock. Can get the lock.
2.	Read/Write lock. Check if the lock is obtained by the transaction itself.

getReadLock(Instruction instruction):
Try to get read lock from the variable on any up site. If there is no site up, return false to TM to indicate that the operation is rejected and put instruction into wait list. If there is any up site that can process the instruction, the instruction is processed.

There are 2 cases for read instruction:
1.	No/Read lock. Check if there is any instruction waiting. If there already exist instructions in wait list, the instruction is rejected.
2.	Write lock. Check if the lock is obtained by the transaction itself.

setSiteFail(int siteIndex):
Set site i to fail. Abort transactions that hold locks on that site. Return the set of transaction index that need to be aborted.

setSiteRecover(int siteIndex):
Set site i to recover. For odd indexed variables, set its status directly to up because it can accept R/W instructions immediately. For even indexed variables, set its status to recover because it first needs a committed write instruction to accept read instruction.

releaseLock(int variableIndex, int transactionIndex):
This function is called when any time there is a transaction aborted or committed by TM. It releases locks held by transaction Ti on variable xj and process variable xj’s waitlist by calling dequeWaitList(). The function returns the list of instructions that have acquired locks due to the release of variables.

dequeWaitList(int varaibleIndex):
Process the wait list of the variable xi.

For W instruction:
The algorithm is almost the same as getWriteLock(). The only difference is that the instruction should not put into wait list anymore.

For R instruction:
The algorithm is almost the same as getReadLock(). However, in this case, when the site is up and the instruction is the first one in the wait list, it can get the read lock when the lock on the variable is not write.
